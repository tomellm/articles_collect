//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use domain::articles::Article;
use sea_orm::entity::prelude::*;
use uuid::Uuid;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "articles")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub uuid: Uuid,
    pub title: String,
    pub url: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

impl From<Model> for Article {
    fn from(Model { uuid, title, url }: Model) -> Self {
        Article::new(uuid, title, url)
    }
}

impl From<Article> for Model {
    fn from(Article { uuid, title, url }: Article) -> Self {
        Model { uuid, title, url }
    }
}
