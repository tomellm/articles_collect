//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use domain::articles::Article;
use sea_orm::entity::prelude::*;
use uuid::Uuid;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "articles")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub uuid: Uuid,
    pub title: String,
    pub url: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

impl From<Model> for Article {
    fn from(Model { uuid, title, url }: Model) -> Self {
        Article::new(uuid, title, url)
    }
}

impl From<Article> for Model {
    fn from(Article { uuid, title, url }: Article) -> Self {
        Model { uuid, title, url }
    }
}

#[cfg(test)]
mod tests {
    use domain::articles::Article;
    use uuid::Uuid;

    use crate::entities::articles::Model;

    #[test]
    fn articles_model_from_from_causes_no_change() {
        let art = basic_article();
        let converted = Article::from(Model::from(art.clone()));
        assert_eq!(art, converted);
    }

    #[test]
    fn model_articles_from_from_causes_no_change() {
        let art = basic_model();
        let converted = Model::from(Article::from(art.clone()));
        assert_eq!(art, converted);
    }

    fn basic_model() -> Model {
        Model {
            uuid: Uuid::new_v4(),
            title: String::from("title"),
            url: String::from("url"),
        }
    }

    fn basic_article() -> Article {
        Article::from_parts(String::from("title"), String::from("url"))
    }
}
